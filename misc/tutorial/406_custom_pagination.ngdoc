@ngdoc overview
@name Tutorial: 406 Custom Pagination
@description

When pagination is enabled, the data is displayed in pages that can be browsed using the built in
pagination selector. However, you don't always have pages with the same number of rows.

For custom pagination, set the `pageSizes` option and the `useCustomPagination`.
~~ and implement the `gridApi.pagination.on.paginationChanged` callback function. The callback
may contain code to update any pagination state variables your application may utilize, e.g. variables containing
the `pageNumber`, `pageSize`, and `pageSizeList`. The REST call used to fetch the data from the server should be
called from within this callback. The URL of the call should contain query parameters that will allow the server-side
code to have sufficient information to be able to retrieve the specific subset of data that the client requires from
the entire set.~~

It should also update the `$scope.gridOptions.totalItems` variable with the total count of rows that exist (but
were not all fetched in the REST call mentioned above since they exist in other pages of data).

This will allow ui-grid to calculate the correct number of pages on the client-side.

For better performance with the following example, you can choose to load the ui-grid.core.js and specific feature files instead:
<pre>
  <script src="/release/ui-grid.core.min.js"></script>
  <script src="/release/ui-grid.pagination.min.js"></script>
</pre>

@example
This shows custom pagination.
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.pagination']);

    app.controller('MainCtrl', [
    '$scope', '$http', 'uiGridConstants', function($scope, $http, uiGridConstants) {

      $scope.gridOptions1 = {
        paginationPageSizes: null,
        useCustomPagination: true,
        columnDefs: [
          { name: 'name', enableSorting: false },
          { name: 'gender', enableSorting: false },
          { name: 'company', enableSorting: false }
        ]
      };

      $scope.gridOptions2 = {
        paginationPageSizes: null,
        useCustomPagination: true,
        useExternalPagination : true,
        columnDefs: [
          { name: 'name', enableSorting: false },
          { name: 'gender', enableSorting: false },
          { name: 'company', enableSorting: false }
        ],
        onRegisterApi: function(gridApi) {
          gridApi.pagination.on.paginationChanged($scope, function (pageNumber, pageSize) {
            $scope.gridOptions2.data = getPage($scope.grid2data, pageNumber);
          });
        }
      };

      $http.get('/data/100_ASC.json')
      .then(function (response) {
        var data = response.data;

        $scope.gridOptions1.data = data;
        $scope.gridOptions1.paginationPageSizes = calculatePageSizes(data);
      });

      $http.get('/data/100.json')
      .then(function (response) {
        var data = response.data;

        $scope.grid2data = data;
        $scope.gridOptions2.totalItems = 0;//data.length;
        $scope.gridOptions2.paginationPageSizes = calculatePageSizes(data);
        $scope.gridOptions2.data = getPage($scope.grid2data, 1);
      });


      function calculatePageSizes(data) {
        var initials = [];
        return data.reduce(function(pageSizes, row) {
          var initial = row.name.charAt(0);
          var index = initials.indexOf(initial);
          if(index < 0)
          {
            index = initials.length;
            initials.push(initial);
          }
          pageSizes[index] = (pageSizes[index] || 0) + 1;
          return pageSizes;
        }, []);
      }

      function getPage(data, pageNumber)
      {
        var initials = [];
        return data.reduce(function(pages, row) {
          var initial = row.name.charAt(0);

          if(!pages[initial]) pages[initial] = [];
          pages[initial].push(row);

          if(initials.indexOf(initial) < 0)
          {
            initials.push(initial);
            initials.sort();
          }

          return pages;

        }, {})[initials[pageNumber - 1]] || [];
      }

    }
    ]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div ui-grid="gridOptions1" ui-grid-pagination class="grid"></div>
      <div ui-grid="gridOptions2" ui-grid-pagination class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 600px;
    }
  </file>
</example>
