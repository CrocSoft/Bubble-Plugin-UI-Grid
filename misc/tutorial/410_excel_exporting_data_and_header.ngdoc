@ngdoc overview
@name Tutorial: 410 Exporting Data with Fonts, Colors and Header in Excel
@description

<div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

The exporter feature allows data to be exported from the grid in
excel format with a header.  The exporter can export all data, visible data or selected data.

To use the exporter you need to include the ui-grid-exporter directive on
your grid.  If you want to export selected rows you must include the ui-grid-selection
directive on your grid.

If you want to export as Excel you need to have installed Excel-Builder which also uses lodash and jszip,
available through:
<pre>  bower install lodash
  bower install jszip#2.6.1
  bower install excelbuilder  </pre>

or

<pre>  npm install lodash
  npm install jszip@2.6.1
  npm install excel-builder  </pre>


The options and API for exporter can be found at {@link api/ui.grid.exporter ui.grid.exporter}, and

- {@link api/ui.grid.exporter.api:ColumnDef columnDef}
- {@link api/ui.grid.exporter.api:GridOptions gridOptions}
- {@link api/ui.grid.exporter.api:PublicApi publicApi}

The exporter adds menu items to the grid menu, to use the native UI you need to enable
the grid menu using the gridOption `enableGridMenu`

Note that the option to export selected data is only visible if you have data selected.

Additionally, information about the Excel Builder may be found at https://github.com/stephenliberty/excel-builder.js.

If the example below we show how to make a custom header based on a callback method and


@example
In this example we use the native grid menu buttons, and we show the pdf, csv and excel export options.

<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid', 'ui.grid.selection', 'ui.grid.exporter']);

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {

      $scope.formatters = {};

      $scope.randomDate = function randomDate(start, end) {
        var diff =  end.getTime() - start.getTime();
        var new_diff = diff * Math.random();
        var date = new Date(start.getTime() + new_diff);
        return date;
      };

      $scope.gridOptions = {
        columnDefs: [
          { field: 'name' },
          { field: 'gender', visible: false},
          { field: 'company' },
          { field: 'member' },
          { field: 'total' },
          { field: 'updatedDate', displayName: 'Date', cellFilter: 'date:\'yyyy-MM-dd\'', width: 150,
            sortingAlgorithm: function (aDate, bDate) {
                 var a=new Date(aDate);
                 var b=new Date(bDate);
                 if (a < b) {
                   return -1;
                 }
                 else if (a > b) {
                   return 1;
                 }
                 else {
                   return 0;
                 }
               }
          }
        ],
        enableGridMenu: true,
        enableSelectAll: true,
        exporterCsvFilename: 'myFile.csv',
        exporterPdfDefaultStyle: {fontSize: 9},
        exporterPdfTableStyle: {margin: [30, 30, 30, 30]},
        exporterPdfTableHeaderStyle: {fontSize: 10, bold: true, italics: true, color: 'red'},
        exporterPdfHeader: { text: "My Header", style: 'headerStyle' },
        exporterPdfFooter: function ( currentPage, pageCount ) {
          return { text: currentPage.toString() + ' of ' + pageCount.toString(), style: 'footerStyle' };
        },
        exporterPdfCustomFormatter: function ( docDefinition ) {
          docDefinition.styles.headerStyle = { fontSize: 22, bold: true };
          docDefinition.styles.footerStyle = { fontSize: 10, bold: true };
          return docDefinition;
        },
        exporterPdfOrientation: 'portrait',
        exporterPdfPageSize: 'LETTER',
        exporterPdfMaxGridWidth: 500,
        exporterCsvLinkElement: angular.element(document.querySelectorAll(".custom-csv-link-location")),
        exporterExcelFilename: 'myFile.xlsx',
        exporterExcelSheetName: 'Sheet1',
        exporterExcelCustomFormatters: function ( grid, workbook, docDefinition ) {

          var stylesheet = workbook.getStyleSheet();
          var stdStyle = stylesheet.createFontStyle({
            size: 9, fontName: 'Calibri'
          });
          var boldStyle = stylesheet.createFontStyle({
            size: 9, fontName: 'Calibri', bold: true
          });
          var aFormatDefn = {
            "font": boldStyle.id,
            "alignment": { "wrapText": true }
          };
          var formatter = stylesheet.createFormat(aFormatDefn);
          // save the formatter
          $scope.formatters['bold'] = formatter;
          var dateFormatter = stylesheet.createSimpleFormatter('date');
          $scope.formatters['date'] = dateFormatter;

          aFormatDefn = {
            "font": stdStyle.id,
            "fill": { "type": "pattern", "patternType": "solid", "fgColor": "FFFFC7CE" },
            "alignment": { "wrapText": true }
          };
          var singleDefn = {
            font: stdStyle.id,
            format: '#,##0.0'
          };
          formatter = stylesheet.createFormat(aFormatDefn);
          // save the formatter
          $scope.formatters['red'] = formatter;

          Object.assign(docDefinition.styles , $scope.formatters);

          return docDefinition;
        },
        exporterExcelHeader: function (grid, workbook, sheet, docDefinition) {
            // this can be defined outside this method
            var stylesheet = workbook.getStyleSheet();
            var aFormatDefn = {
              "font": { "size": 11, "fontName": "Calibri", "bold": true },
              "alignment": { "wrapText": true }
            };
            var formatterId = stylesheet.createFormat(aFormatDefn);

            // excel cells start with A1 which is upper left corner
            sheet.mergeCells('B1', 'C1');
            var cols = [];
            // push empty data
            cols.push({ value: '' });
            // push data in B1 cell with metadata formatter
            cols.push({ value: 'My header that is long enough to wrap', metadata: {style: formatterId.id} });
            sheet.data.push(cols);
        },
        exporterFieldFormatCallback: function(grid, row, gridCol, cellValue) {
         // set metadata on export data to set format id. See exportExcelHeader config above for example of creating
         // a formatter and obtaining the id
         var formatterId = null;
         if (gridCol.field === 'name' && cellValue && cellValue.startsWith('W')) {
           formatterId = $scope.formatters['red'].id;
         }

         if (gridCol.field === 'updatedDate') {
           formatterId = $scope.formatters['date'].id;
         }

         if (formatterId) {
           return {metadata: {style: formatterId}};
         } else {
           return null;
         }
        },
        exporterColumnScaleFactor: 4.5,
        exporterFieldApplyFilters: true,
        onRegisterApi: function(gridApi){
          $scope.gridApi = gridApi;
        }
      };

      $http.get('/data/100.json')
      .then(function(response) {
        var data = response.data;

        for (var i=0; i < data.length; i++) {
          data[i].member = false;
          data[i].total = i + 0.1;
          data[i].updatedDate = $scope.randomDate(new Date('09-11-2008'), new Date());
        }
        $scope.gridOptions.data = data;
      });

    }]);
  </file>

  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div ui-grid="gridOptions" ui-grid-selection ui-grid-exporter class="grid"></div>
    </div>
  </file>

  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }
  </file>
</example>
