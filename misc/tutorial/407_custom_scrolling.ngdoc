@ngdoc overview
@name Tutorial: 407 Custom Scrolling
@description

The custom scrolling feature allows you to provide your own scroller function to replace default element.on('scroll') function. It is particularly
helpful if you are facing issues with scrolling on devices or slow machines, because it allows you to use thirdparty scrollers.

Documentation for the custom scrolling feature is provided in the api documentation, in particular:

- {@link api/ui.grid.class:GridOptions customScroller}

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', '$log', function ($scope, $http, $log) {
      $scope.scroll ={
       top: 0,
       left: 0
      };

      $scope.gridOptions = {
        customScroller: function myScrolling(uiGridViewport, scrollHandler) {
          uiGridViewport.on('scroll', function myScrollingOverride(event) {
            $scope.scroll.top = uiGridViewport[0].scrollTop;
            $scope.scroll.left = uiGridViewport[0].scrollLeft;

            // You should always pass the event to the callback since ui-grid needs it
            scrollHandler(event);
          });
        }
      };

      $scope.gridOptions.columnDefs = [
        { name:'id', width:50 },
        { name:'name', width:100 },
        { name:'age', width:100 },
        { name:'address.street', width:150  },
        { name:'address.city', width:150 },
        { name:'address.state', width:50 },
        { name:'address.zip', width:50 },
        { name:'company', width:100 },
        { name:'email', width:100 },
        { name:'phone', width:200 },
        { name:'about', width:300 },
        { name:'friends[0].name', displayName:'1st friend', width:150 },
        { name:'friends[1].name', displayName:'2nd friend', width:150 },
        { name:'friends[2].name', displayName:'3rd friend', width:150 },
      ];

      $http.get('/data/500_complex.json')
        .then(function(response) {
          $scope.gridOptions.data = response.data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div class="row">
        <label class="col-sm-2">Scroll Top: </label>
        <div class="col-sm-4">
          {{ scroll.top }}
        </div>
        <label class="col-sm-2">Scroll Left: </label>
        <div class="col-sm-4">
          {{ scroll.left }}
        </div>
      </div>
      <div ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 100%;
      height: 400px;
    }
  </file>
</example>
