@ngdoc overview
@name Tutorial: 323 More Binding examples
@description

UI-Grid can also bind be to a one-dimensional array of primitives - in this case using `uiGridConstants.ENTITY_BINDING` will use the entire entry in the data array as the value for the cell instead of a field therein. This is useful if the data is an array of strings, or also if a cell filter needs access to multiple fields within each row object.

For better performance with the following example, you can choose to load the ui-grid.core.js and specific feature files instead:
<pre>
  <script src="/release/ui-grid.core.min.js"></script>
  <script src="/release/ui-grid.edit.min.js"></script>
</pre>

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.edit']);

    app.controller('OneDimensionCtrl', ['$scope', 'uiGridConstants', function ($scope, uiGridConstants) {

      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          { name:'Name', field: uiGridConstants.ENTITY_BINDING }
        ],
        data: [
          "John Rogers",
          "David Michaels",
          "Andrew Johnson",
          "Donald McDonald"
        ]
      };
    }]);


    app.filter('calculatePercentage', function () {
      return function (input, resultField, maxField) {
        return Math.floor((input[resultField] * 100) / input[maxField]) + "%";
      };
    });
    app.controller('ComplexFilterCtrl', ['$scope', 'uiGridConstants', function ($scope, uiGridConstants) {

    $scope.gridOptions = {
            enableSorting: true,
            columnDefs: [
              { name:'Exam', field: 'examName' },
              { name:'Possible Score', field: 'maxScore' },
              { name:'Your Score', field: 'actualScore' },
              { name:'Percentage', field: uiGridConstants.ENTITY_BINDING, cellFilter: 'calculatePercentage:"actualScore":"maxScore"', sortCellFiltered: true, enableCellEdit: false }
            ],
            data : [
              {
                examName: 'Basic Trig',
                maxScore: 105,
                actualScore: 77
              },
              {
                examName: 'Graph Theory',
                maxScore: 85,
                actualScore: 82
              },
              {
                examName: 'Counting',
                maxScore: 40,
                actualScore: 12
              },
            ]
          };
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="OneDimensionCtrl">
      <h3>Array of Strings Example</h3>
      <div id="grid1" ui-grid="gridOptions" ui-grid-edit class="grid"></div>
    </div>
    <div ng-controller="ComplexFilterCtrl">
      <h3>Complex CellFilter Example</h3>
      <div id="grid2" ui-grid="gridOptions" ui-grid-edit class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 250px;
    }
  </file>
  <file name="1d-scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    it('grid should have four visible rows and one column', function () {
      gridTestUtils.expectRowCount( 'grid1', 4 );
      gridTestUtils.expectHeaderColumnCount( 'grid1', 1 );
    });

    it('headers as specified', function () {
      gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
    });

    it('row values should be as expected', function () {
      gridTestUtils.expectRowValuesMatch( 'grid1', 0, [ 'John Rogers' ]);
      gridTestUtils.expectRowValuesMatch( 'grid1', 1, [ 'David Michaels' ]);
      gridTestUtils.expectRowValuesMatch( 'grid1', 2, [ 'Andrew Johnson' ]);
      gridTestUtils.expectRowValuesMatch( 'grid1', 3, [ 'Donald McDonald' ]);
    });
  </file>  
  <file name="filter-scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    it('grid should have four visible rows and 4 columns', function () {
      gridTestUtils.expectRowCount( 'grid2', 4 );
      gridTestUtils.expectHeaderColumnCount( 'grid2', 4 );
    });

    it('headers as specified', function () {
      gridTestUtils.expectHeaderCellValueMatch( 'grid2', 0, 'Exam' );
      gridTestUtils.expectHeaderCellValueMatch( 'grid2', 1, 'Possible Exam' );
      gridTestUtils.expectHeaderCellValueMatch( 'grid2', 2, 'Actual Exam' );
      gridTestUtils.expectHeaderCellValueMatch( 'grid2', 3, 'Percentage' );
    });

    it('row values should be as expected', function () {
      gridTestUtils.expectRowValuesMatch( 'grid2', 0, [ 'Basic Trig', '105', '77', '73%' ]);
      gridTestUtils.expectRowValuesMatch( 'grid2', 1, [ 'Graph Theory', '85', '82', '96%' ]);
      gridTestUtils.expectRowValuesMatch( 'grid2', 2, [ 'Counting', '40', '12', '30%' ]);
    });
  </file>  
</example>
</example>
